import tkinter as tk
import random
import pygame
import configparser
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# –°–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö
symbols = ['üçí', 'üçã', 'üçâ', 'üçá', 'üçä', 'üçç', 'üçé']

# –î–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
prizes = {
    'üçí': 10, 'üçã': 20, 'üçâ': 30, 'üçá': 50,
    'üçä': 100, 'üçç': 200, 'üçé': 1000
}

# –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CONFIG_FILE = "settings.ini"

class GamblingMachineApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–º–±–ª–∏–Ω–≥ –º–∞—à–∏–Ω–∞ üé∞")
        self.root.geometry("840x810")
        self.root.configure(bg="#282828")

        # –ë–∞–ª–∞–Ω—Å
        self.start_balance = 1000
        self.balance = self.start_balance

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        self.balance_label = tk.Label(root, text=f"–ë–∞–ª–∞–Ω—Å: {self.balance} –≥—Ä–Ω", font=("Arial", 16), fg="yellow", bg="#282828")
        self.balance_label.grid(row=0, column=0, columnspan=3, pady=10)

        # –ë–∞—Ä–∞–±–∞–Ω—ã
        self.labels = [tk.Label(root, text="üçí", font=("Arial", 60), width=5, fg="gold", bg="#282828") for _ in range(3)]
        for i, label in enumerate(self.labels):
            label.grid(row=1, column=i, padx=15)

        # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞
        self.spin_button = tk.Button(root, text="–ù–∞–∂–º–∏ –¥–ª—è —Å–ø–∏–Ω–∞", font=("Arial", 18), command=self.spin,
                                     bg="#ff5722", fg="white", relief="flat", height=2, width=20)
        self.spin_button.grid(row=2, column=0, columnspan=3, pady=20)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
        self.result_label = tk.Label(root, text="", font=("Arial", 14), fg="yellow", bg="#282828")
        self.result_label.grid(row=3, column=0, columnspan=3, pady=10)

        # –ú—É–∑—ã–∫–∞
        pygame.mixer.init()
        self.config = configparser.ConfigParser()
        self.load_settings()

        # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        self.volume_slider = tk.Scale(root, from_=0, to=1, resolution=0.1, orient="horizontal",
                                      command=self.set_volume, bg="#282828", fg="yellow", font=("Arial", 12))
        self.volume_slider.set(self.volume)
        self.volume_slider.grid(row=5, column=1, pady=10, columnspan=2)

        # –ö–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
        self.sound_button = tk.Button(root, text="üîä" if self.sound_on else "üîá", font=("Arial", 18),
                                      command=self.toggle_sound, bg="#4CAF50" if self.sound_on else "red", fg="white", relief="flat", height=1, width=5)
        self.sound_button.grid(row=5, column=0, pady=10)

        # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
        self.spin_count = 0
        self.balance_history = [self.balance]

        self.fig, self.ax = plt.subplots(figsize=(5, 4))
        self.update_graph()

        # –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏
        if self.sound_on:
            self.play_music()

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(CONFIG_FILE):
            self.config.read(CONFIG_FILE)
            self.volume = float(self.config.get("Settings", "Volume", fallback="0.5"))
            self.sound_on = self.config.getboolean("Settings", "SoundOn", fallback=True)
        else:
            self.volume = 0.5
            self.sound_on = True

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        self.config["Settings"] = {"Volume": str(self.volume), "SoundOn": str(self.sound_on)}
        with open(CONFIG_FILE, "w") as configfile:
            self.config.write(configfile)

    def play_music(self):
        """–ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏"""
        pygame.mixer.music.load("music.mp3")
        pygame.mixer.music.set_volume(self.volume)
        pygame.mixer.music.play(-1)

    def stop_music(self):
        """–ü–æ–ª–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        pygame.mixer.music.stop()
        self.sound_on = False
        self.sound_button.config(text="üîá", bg="red")
        self.save_settings()

    def set_volume(self, volume):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        self.volume = float(volume)
        pygame.mixer.music.set_volume(self.volume)
        self.save_settings()

    def toggle_sound(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        if self.sound_on:
            pygame.mixer.music.pause()
            self.sound_button.config(text="üîá", bg="red")
        else:
            pygame.mixer.music.unpause()
            self.sound_button.config(text="üîä", bg="#4CAF50")
        self.sound_on = not self.sound_on
        self.save_settings()

    def spin(self):
        if self.balance <= 0:
            self.result_label.config(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!", fg="red")
            return

        spin_cost = 50
        self.balance -= spin_cost
        self.update_balance_label()

        self.animate_spin_step(0)
        self.spin_count += 1
        self.balance_history.append(self.balance)

        self.update_graph()

    def animate_spin_step(self, step):
        if step < 20:
            self.animate_spin()
            self.root.after(50, self.animate_spin_step, step + 1)
        else:
            self.show_result()

    def animate_spin(self):
        for label in self.labels:
            label.config(text=random.choice(symbols))

    def show_result(self):
        result = [label.cget("text") for label in self.labels]
        win_symbol = self.check_win(result)
        if win_symbol:
            self.process_win(win_symbol)
        else:
            self.result_label.config(text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", fg="yellow")

    def check_win(self, result):
        return result[0] if len(set(result)) == 1 else None

    def process_win(self, symbol):
        win_amount = prizes.get(symbol, 0)
        self.balance += win_amount
        self.update_balance_label()
        self.result_label.config(text=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –≥—Ä–Ω!", fg="yellow")

        self.balance_history.append(self.balance)
        self.update_graph()

    def update_balance_label(self):
        self.balance_label.config(text=f"–ë–∞–ª–∞–Ω—Å: {self.balance} –≥—Ä–Ω")

    def update_graph(self):
        self.ax.clear()
        self.ax.set_facecolor("#333333")
        self.fig.patch.set_facecolor("#282828")

        for spine in self.ax.spines.values():
            spine.set_color("#282828")

        self.ax.set_title('–ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞', fontsize=16, color='yellow')
        self.ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤', fontsize=12, color='yellow')
        self.ax.set_ylabel('–ë–∞–ª–∞–Ω—Å', fontsize=12, color='yellow')

        self.ax.tick_params(axis='x', colors='yellow')
        self.ax.tick_params(axis='y', colors='yellow')

        self.ax.plot(self.balance_history, color="red", label="–ë–∞–ª–∞–Ω—Å", linewidth=2)
        self.ax.legend(facecolor='#282828', edgecolor='yellow', fontsize=10)

        if not hasattr(self, 'canvas'):
            self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)
            self.canvas.get_tk_widget().grid(row=4, column=0, columnspan=3, pady=20)

        self.canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = GamblingMachineApp(root)
    root.mainloop()
