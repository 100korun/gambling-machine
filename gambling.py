import tkinter as tk
from tkinter import ttk
import random
import pygame
import configparser
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# –°–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö
symbols = ['üçí', 'üçã', 'üçâ', 'üçá', 'üçä', 'üçç', 'üçé']

# –î–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
prizes = {
    'üçí': 100, 'üçã': 300, 'üçâ': 200, 'üçá': 400,
    'üçä': 100, 'üçç': 200, 'üçé': 1000
}

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∑–∞ –ø–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ (2 –∏–∑ 3)
pair_prizes = {
    'üçí': 10, 'üçã': 30, 'üçâ': 20, 'üçá': 20,
    'üçä': 10, 'üçç': 20, 'üçé': 50
}

# –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CONFIG_FILE = "settings.ini"


class SettingsWindow:
    def __init__(self, parent, app):
        self.parent = parent
        self.app = app

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.window.geometry("400x300")
        self.window.configure(bg="#333333")
        self.window.transient(parent)  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É
        self.window.grab_set()  # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º

        # –°—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        style = ttk.Style()
        style.configure("TFrame", background="#333333")
        style.configure("TLabel", background="#333333", foreground="white", font=("Arial", 12))
        style.configure("TScale", background="#333333")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.window, padding=20, style="TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞", font=("Arial", 16, "bold"), style="TLabel")
        title_label.pack(pady=(0, 20))

        # –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        music_frame = ttk.Frame(main_frame, style="TFrame")
        music_frame.pack(fill=tk.X, pady=10)

        music_label = ttk.Label(music_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏:", style="TLabel")
        music_label.pack(side=tk.LEFT, padx=5)

        self.music_scale = ttk.Scale(music_frame, from_=0, to=1, length=200,
                                     value=self.app.music_volume, orient="horizontal")
        self.music_scale.pack(side=tk.RIGHT, padx=5)

        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        effects_frame = ttk.Frame(main_frame, style="TFrame")
        effects_frame.pack(fill=tk.X, pady=10)

        effects_label = ttk.Label(effects_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:", style="TLabel")
        effects_label.pack(side=tk.LEFT, padx=5)

        self.effects_scale = ttk.Scale(effects_frame, from_=0, to=1, length=200,
                                       value=self.app.effects_volume, orient="horizontal")
        self.effects_scale.pack(side=tk.RIGHT, padx=5)

        # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
        sound_frame = ttk.Frame(main_frame, style="TFrame")
        sound_frame.pack(fill=tk.X, pady=10)

        self.sound_var = tk.BooleanVar(value=self.app.sound_on)
        sound_check = ttk.Checkbutton(sound_frame, text="–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫", variable=self.sound_var)
        sound_check.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        button_frame = ttk.Frame(main_frame, style="TFrame")
        button_frame.pack(fill=tk.X, pady=(20, 0))

        save_button = tk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", bg="#4CAF50", fg="white",
                                font=("Arial", 12), command=self.save_settings, relief="flat")
        save_button.pack(side=tk.RIGHT, padx=5)

        cancel_button = tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", bg="#f44336", fg="white",
                                  font=("Arial", 12), command=self.window.destroy, relief="flat")
        cancel_button.pack(side=tk.RIGHT, padx=5)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"""
        self.app.music_volume = self.music_scale.get()
        self.app.effects_volume = self.effects_scale.get()
        self.app.sound_on = self.sound_var.get()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.app.sound_on:
            pygame.mixer.music.set_volume(self.app.music_volume)
            if not pygame.mixer.music.get_busy():
                self.app.play_music()
        else:
            pygame.mixer.music.pause()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.app.save_settings()
        self.window.destroy()


class GamblingMachineApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–º–±–ª–∏–Ω–≥ –º–∞—à–∏–Ω–∞ üé∞")

        self.root.geometry("840x810")

        self.root.configure(bg="#282828")

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
        self.spinning = False

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        self.top_frame = tk.Frame(root, bg="#282828")
        self.top_frame.pack(fill=tk.X, padx=10, pady=5)

        self.game_frame = tk.Frame(root, bg="#282828")
        self.game_frame.pack(padx=10, pady=5)

        self.control_frame = tk.Frame(root, bg="#282828")
        self.control_frame.pack(fill=tk.X, padx=10, pady=5)

        self.graph_frame = tk.Frame(root, bg="#282828")
        self.graph_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –ë–∞–ª–∞–Ω—Å
        self.start_balance = 1000
        self.balance = self.start_balance

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ñ—Ä–µ–π–º–µ
        self.balance_label = tk.Label(self.top_frame, text=f"–ë–∞–ª–∞–Ω—Å: {self.balance} –≥—Ä–Ω",
                                      font=("Arial", 16), fg="yellow", bg="#282828")
        self.balance_label.pack(side=tk.LEFT, pady=10)

        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        pygame.mixer.init()
        self.config = configparser.ConfigParser()
        self.load_settings()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–ø—Ä–∞–≤–∞)
        self.settings_button = tk.Button(self.top_frame, text="‚öôÔ∏è", font=("Arial", 14),
                                         command=self.open_settings, bg="#555555", fg="white",
                                         relief="flat", height=1, width=3)
        self.settings_button.pack(side=tk.RIGHT, padx=5)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤ (–¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
        self.reels_frame = tk.Frame(self.game_frame, bg="#333333", bd=2, relief=tk.GROOVE)
        self.reels_frame.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

        # –ë–∞—Ä–∞–±–∞–Ω—ã –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–º–∫–µ
        self.labels = [tk.Label(self.reels_frame, text="üçí", font=("Arial", 60),
                                width=4, fg="gold", bg="#333333") for _ in range(3)]
        for i, label in enumerate(self.labels):
            label.grid(row=0, column=i, padx=15, pady=10)

        # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ –ø–æ–¥ –±–∞—Ä–∞–±–∞–Ω–∞–º–∏
        self.spin_button = tk.Button(self.game_frame, text="–ö—Ä—É—Ç–∏—Ç—å! üé∞",
                                     font=("Arial", 18), command=self.spin,
                                     bg="#ff5722", fg="white", relief="raised",
                                     height=1, width=15)
        self.spin_button.grid(row=1, column=0, columnspan=3, pady=15)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
        self.result_label = tk.Label(self.game_frame, text="",
                                     font=("Arial", 14), fg="yellow", bg="#282828")
        self.result_label.grid(row=2, column=0, columnspan=3, pady=10)

        # –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ" (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.play_again_button = tk.Button(self.game_frame, text="–ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ",
                                           font=("Arial", 18), command=self.reset_game,
                                           bg="#4CAF50", fg="white", relief="raised",
                                           height=1, width=15)

        # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
        self.spin_count = 0
        self.balance_history = [self.balance]

        self.fig, self.ax = plt.subplots(figsize=(5, 3))
        self.update_graph()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
        if self.sound_on:
            self.play_music()

    def reset_game(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.balance = self.start_balance
        self.update_balance_label()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
        self.spin_count = 0
        self.balance_history = [self.balance]
        self.update_graph()

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—Ä—É—Ç–∏—Ç—å"
        self.play_again_button.grid_forget()
        self.spin_button.grid(row=1, column=0, columnspan=3, pady=15)

        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        self.result_label.config(text="–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!", fg="yellow")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = SettingsWindow(self.root, self)

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(CONFIG_FILE):
            self.config.read(CONFIG_FILE)
            self.music_volume = float(self.config.get("Settings", "MusicVolume", fallback="0.5"))
            self.effects_volume = float(self.config.get("Settings", "EffectsVolume", fallback="0.7"))
            self.sound_on = self.config.getboolean("Settings", "SoundOn", fallback=True)
        else:
            self.music_volume = 0.5
            self.effects_volume = 0.7
            self.sound_on = True

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        self.config["Settings"] = {
            "MusicVolume": str(self.music_volume),
            "EffectsVolume": str(self.effects_volume),
            "SoundOn": str(self.sound_on)
        }
        with open(CONFIG_FILE, "w") as configfile:
            self.config.write(configfile)

    def play_music(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
        try:
            pygame.mixer.music.load("music.mp3")
            pygame.mixer.music.set_volume(self.music_volume)
            pygame.mixer.music.play(-1)  # -1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        except:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ music.mp3")

    def play_win_sound(self, mega=False):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞"""
        if not self.sound_on:
            return

        try:
            # –ö–∞–Ω–∞–ª 1 –¥–ª—è –∑–≤—É–∫–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏)
            if mega:
                sound = pygame.mixer.Sound("mega_win.wav")
            else:
                sound = pygame.mixer.Sound("win.wav")

            sound.set_volume(self.effects_volume)
            pygame.mixer.Channel(1).play(sound)
        except:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ win.wav –∏ mega_win.wav")

    def play_spin_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏–Ω–∞"""
        if not self.sound_on:
            return

        try:
            # –ö–∞–Ω–∞–ª 2 –¥–ª—è –∑–≤—É–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            sound = pygame.mixer.Sound("spin.wav")
            sound.set_volume(self.effects_volume)
            pygame.mixer.Channel(2).play(sound)
        except:
            print("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —Å–ø–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ spin.wav")

    def spin(self):
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∏–Ω –ø–æ–∫–∞ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
        if self.spinning:
            return

        if self.balance <= 0:
            self.result_label.config(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!", fg="red")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
            self.spin_button.grid_forget()
            self.play_again_button.grid(row=1, column=0, columnspan=3, pady=15)
            return

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        self.play_spin_sound()

        spin_cost = 50
        self.balance -= spin_cost
        self.update_balance_label()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
        self.spinning = True
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.spin_button.config(state=tk.DISABLED)
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label.config(text="–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...", fg="white")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
        self.final_symbols = [random.choice(symbols) for _ in range(3)]
        self.start_sequential_animation(0, 20)

    def start_sequential_animation(self, reel_index, steps):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        if reel_index < len(self.labels):
            self.animate_reel(reel_index, steps, 0)
        else:
            # –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.spinning = False
            self.spin_button.config(state=tk.NORMAL)
            self.show_result()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            self.spin_count += 1
            self.balance_history.append(self.balance)
            self.update_graph()

    def animate_reel(self, reel_index, total_steps, current_step):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞"""
        if current_step < total_steps:
            # –ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
            delay = 30
            if current_step > total_steps * 0.7:
                delay = 30 + int(((current_step - total_steps * 0.7) / (total_steps * 0.3)) * 100)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
            self.labels[reel_index].config(text=random.choice(symbols))

            # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
            self.root.after(delay, self.animate_reel, reel_index, total_steps, current_step + 1)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ä–∞–±–∞–Ω—É
            self.labels[reel_index].config(text=self.final_symbols[reel_index])
            # –≠—Ñ—Ñ–µ–∫—Ç "–¥—Ä–æ–∂–∞–Ω–∏—è" –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self.root.after(100, self.shake_reel, reel_index, 5)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ä–∞–±–∞–Ω–æ–º
            self.root.after(300, self.start_sequential_animation, reel_index + 1, total_steps - 5)

    def shake_reel(self, reel_index, shake_count):
        """–≠—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        if shake_count > 0:
            # –ú–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
            padding = 15 if shake_count % 2 == 0 else 16
            self.labels[reel_index].grid(row=0, column=reel_index, padx=padding, pady=10)
            self.root.after(50, self.shake_reel, reel_index, shake_count - 1)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
            self.labels[reel_index].grid(row=0, column=reel_index, padx=15, pady=10)

    def show_result(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞"""
        result = [label.cget("text") for label in self.labels]
        win_result = self.check_win(result)

        if win_result:
            if win_result[0] == "three_same":
                # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
                self.process_win(win_result[1], is_triple=True)
            elif win_result[0] == "pair":
                # –ü–∞—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
                self.process_win(win_result[1], is_triple=False)
        else:
            self.result_label.config(text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", fg="yellow")

    def check_win(self, result):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - ("three_same", —Å–∏–º–≤–æ–ª) –µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        - ("pair", —Å–∏–º–≤–æ–ª) –µ—Å–ª–∏ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        - None –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        if len(set(result)) == 1:
            return ("three_same", result[0])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä—É
        for symbol in symbols:
            if result.count(symbol) == 2:
                return ("pair", symbol)

        return None

    def process_win(self, symbol, is_triple=True):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞"""
        if is_triple:
            win_amount = prizes.get(symbol, 0)
            win_text = f"–ö–û–ú–ë–û: —Ç—Ä–∏ {symbol}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –≥—Ä–Ω! üéâ"
        else:
            win_amount = pair_prizes.get(symbol, 0)
            win_text = f"–ü–ê–†–ê {symbol}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –≥—Ä–Ω!"

        self.balance += win_amount
        self.update_balance_label()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à —ç—Ç–æ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
        is_mega_win = win_amount >= 200

        if is_mega_win:
            self.result_label.config(text=f"–ú–ï–ì–ê –í–´–ò–ì–†–´–®: {win_amount} –≥—Ä–Ω! üéâ", fg="#00ffff")
            self.play_win_sound(mega=True)
        else:
            self.result_label.config(text=win_text, fg="yellow")
            self.play_win_sound(mega=False)

    def update_balance_label(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        self.balance_label.config(text=f"–ë–∞–ª–∞–Ω—Å: {self.balance} –≥—Ä–Ω")

    def update_graph(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
        self.ax.clear()
        self.ax.set_facecolor("#333333")
        self.fig.patch.set_facecolor("#282828")

        for spine in self.ax.spines.values():
            spine.set_color("#282828")

        self.ax.set_title('–ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞', fontsize=14, color='yellow')
        self.ax.set_xlabel('–°–ø–∏–Ω—ã', fontsize=10, color='yellow')
        self.ax.set_ylabel('–ë–∞–ª–∞–Ω—Å', fontsize=10, color='yellow')

        self.ax.tick_params(axis='x', colors='yellow')
        self.ax.tick_params(axis='y', colors='yellow')

        self.ax.plot(self.balance_history, color="red", label="–ë–∞–ª–∞–Ω—Å", linewidth=2)
        self.ax.legend(facecolor='#282828', edgecolor='yellow', fontsize=8)

        if not hasattr(self, 'canvas'):
            self.canvas = FigureCanvasTkAgg(self.fig, master=self.graph_frame)
            self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        self.canvas.draw()


if __name__ == "__main__":
    root = tk.Tk()
    app = GamblingMachineApp(root)
    root.mainloop()